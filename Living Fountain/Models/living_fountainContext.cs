// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;


namespace Living_Fountain.Models;

public partial class living_fountainContext : DbContext
{
    public living_fountainContext()
    {
    }

    public living_fountainContext(DbContextOptions<living_fountainContext> options)
        : base(options)
    {
    }

    public virtual DbSet<customer> customers { get; set; }

    public virtual DbSet<employee> employees { get; set; }

    public virtual DbSet<employee_type> employee_types { get; set; }

    public virtual DbSet<order> orders { get; set; }

    public virtual DbSet<order_status> order_statuses { get; set; }

    public virtual DbSet<product> products { get; set; }

    public virtual DbSet<salary_type> salary_types { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=living_fountain;Integrated Security=True;Encrypt=True;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<customer>(entity =>
        {
            entity.HasKey(e => new { e.block, e.lot, e.phase }).HasName("PK_customers_block");
        });

        modelBuilder.Entity<employee>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_employees_id");

            entity.Property(e => e.emp_type_code)
                .HasDefaultValueSql("(NULL)")
                .IsFixedLength();

            entity.HasOne(d => d.emp_type_codeNavigation).WithMany(p => p.employees)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("employees$employees_ibfk_1");
        });

        modelBuilder.Entity<employee_type>(entity =>
        {
            entity.HasKey(e => e.code).HasName("PK_employee_types_code");

            entity.Property(e => e.code).IsFixedLength();
            entity.Property(e => e.emp_type_desc).HasDefaultValueSql("(NULL)");
        });

        modelBuilder.Entity<order>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_orders_id");

            entity.Property(e => e.block).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.date).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.deliverer_id).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.lot).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.phase).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.price).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.product_code)
                .HasDefaultValueSql("(NULL)")
                .IsFixedLength();
            entity.Property(e => e.quantity).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.status)
                .HasDefaultValueSql("(NULL)")
                .IsFixedLength();

            entity.HasOne(d => d.deliverer).WithMany(p => p.orders)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders$employee");

            entity.HasOne(d => d.product_codeNavigation).WithMany(p => p.orders)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders$product");

            entity.HasOne(d => d.statusNavigation).WithMany(p => p.orders)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders$status");

            entity.HasOne(d => d.customer).WithMany(p => p.orders)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders$address");
        });

        modelBuilder.Entity<order_status>(entity =>
        {
            entity.HasKey(e => e.code).HasName("PK_order_status_code");

            entity.Property(e => e.code).IsFixedLength();
            entity.Property(e => e.status_desc).HasDefaultValueSql("(NULL)");
        });

        modelBuilder.Entity<product>(entity =>
        {
            entity.HasKey(e => e.code).HasName("PK_products_code");

            entity.Property(e => e.code)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.product_desc).HasDefaultValueSql("(NULL)");
        });

        modelBuilder.Entity<salary_type>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_salary_types_id");

            entity.Property(e => e.emp_type_code)
                .HasDefaultValueSql("(NULL)")
                .IsFixedLength();

            entity.HasOne(d => d.emp_type_codeNavigation).WithMany(p => p.salary_types)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("salary_types$salary_types_ibfk_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}